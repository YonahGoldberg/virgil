// Copyright 2024 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Arm64 registers come in 32-bit and 64-bit variants
type RegSize {
	case Half;
	case Full;
}

// Base class for all Arm64 registers
// regnum is an ID 0-32
class Arm64Reg(regnum: byte) {
	def low3 = byte.view(regnum & 0b111);
}

// Representation of an Arm64 general purpose register (x0-x30),
// or the zero register (xzr), or the stack pointer (sp).
class Arm64Gpr extends Arm64Reg {
	def name32: string;
	def name64: string;

	new(name32, name64, regnum: byte) super(regnum) {}

	def name(size: RegSize) -> string {
		match (size) {
			Half => return name32;
			Full => return name64;
		}
	}
}

// SIMD and foating point register
class Arm64Sfr extends Arm64Reg {
	def name: string;
	new(name, regnum: byte) super(regnum) {}
}

// Global constants for all Arm64 Registers
component Arm64Regs {
	def R0 = Arm64Gpr.new("x0", "w0", 0);	def R1 = Arm64Gpr.new("x1", "w1", 1);
	def R2 = Arm64Gpr.new("x2", "w2", 2);	def R3 = Arm64Gpr.new("x3", "w1", 3);
	def R4 = Arm64Gpr.new("x4", "w4", 4);	def R5 = Arm64Gpr.new("x5", "w1", 5);
	def R6 = Arm64Gpr.new("x6", "w6", 6);	def R7 = Arm64Gpr.new("x7", "w1", 7);
	def R8 = Arm64Gpr.new("x8", "w8", 8);	def R9 = Arm64Gpr.new("x9", "w1", 9);
	def R10 = Arm64Gpr.new("x10", "w10", 10);	def R11 = Arm64Gpr.new("x11", "w11", 11);
	def R12 = Arm64Gpr.new("x12", "w12", 12);	def R13 = Arm64Gpr.new("x13", "w13", 13);
	def R14 = Arm64Gpr.new("x14", "w14", 14);	def R15 = Arm64Gpr.new("x15", "w15", 15);
	def R16 = Arm64Gpr.new("x16", "w16", 16);	def R17 = Arm64Gpr.new("x17", "w17", 17);
	def R18 = Arm64Gpr.new("x18", "w18", 18);	def R19 = Arm64Gpr.new("x19", "w19", 19);
	def R20 = Arm64Gpr.new("x20", "w20", 20);	def R21 = Arm64Gpr.new("x21", "w21", 21);
	def R22 = Arm64Gpr.new("x22", "w22", 22);	def R23 = Arm64Gpr.new("x23", "w23", 23);
	def R24 = Arm64Gpr.new("x24", "w24", 24);	def R25 = Arm64Gpr.new("x25", "w25", 25);
	def R26 = Arm64Gpr.new("x26", "w26", 26);	def R27 = Arm64Gpr.new("x27", "w27", 27);
	def R28 = Arm64Gpr.new("x28", "w28", 28);	def R29 = Arm64Gpr.new("x29", "w29", 29);
	def R30 = Arm64Gpr.new("x30", "w30", 30);	def SP = Arm64Gpr.new("sp", "wsp", 31);
	def RZR = Arm64Gpr.new("xzr", "wzr", 32);

	def V0 = Arm64Sfr.new("v0", 0);		def V1 = Arm64Sfr.new("v1", 1);
	def V2 = Arm64Sfr.new("v2", 2);		def V3 = Arm64Sfr.new("v3", 3);
	def V4 = Arm64Sfr.new("v4", 4);		def V5 = Arm64Sfr.new("v5", 5);
	def V6 = Arm64Sfr.new("v6", 6);		def V7 = Arm64Sfr.new("v7", 7);
	def V8 = Arm64Sfr.new("v8", 8);		def V9 = Arm64Sfr.new("v9", 9);
	def V10 = Arm64Sfr.new("v10", 10);		def V11 = Arm64Sfr.new("v11", 11);
	def V12 = Arm64Sfr.new("v12", 12);		def V13 = Arm64Sfr.new("v13", 13);
	def V14 = Arm64Sfr.new("v14", 14);		def V15 = Arm64Sfr.new("v15", 15);
	def V16 = Arm64Sfr.new("v16", 16);		def V17 = Arm64Sfr.new("v17", 17);
	def V18 = Arm64Sfr.new("v18", 18);		def V19 = Arm64Sfr.new("v19", 19);
	def V20 = Arm64Sfr.new("v20", 20);		def V21 = Arm64Sfr.new("v21", 21);
	def V22 = Arm64Sfr.new("v22", 22);		def V23 = Arm64Sfr.new("v23", 23);
	def V24 = Arm64Sfr.new("v24", 24);		def V25 = Arm64Sfr.new("v25", 25);
	def V26 = Arm64Sfr.new("v26", 26);		def V27 = Arm64Sfr.new("v27", 27);
	def V28 = Arm64Sfr.new("v28", 28);		def V29 = Arm64Sfr.new("v29", 29);
	def V30 = Arm64Sfr.new("v30", 30);		def V31 = Arm64Sfr.new("v31", 31);

	def GPRS = [
		R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10,
		R11, R12, R13, R14, R15, R16, R17, R18, R19, R20,
		R21, R22, R23, R24, R25, R26, R27, R28, R29, R30,
		SP, RZR
	];
	
	def SFRS = [
		V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10,
		V11, V12, V13, V14, V15, V16, V17, V18, V19, V20,
		V21, V22, V23, V24, V25, V26, V27, V28, V29, V30,
		V31
	];
}

// a condition for use in jumps, set, and cmov
class Arm64Cond(name: string, index: int) {
	var negate: Arm64Cond;
	var commute: Arm64Cond;
}

// conditions for use in jumps, set, and cmov
component Arm64Conds {
	// TODO add the rest of the codes
	def EQ = Arm64Cond.new("eq", 0);
	def NEQ = Arm64Cond.new("neq", 1);
	def GT = Arm64Cond.new("gt", 2);
	def LT = Arm64Cond.new("lt", 3);

	def all = [EQ, NEQ, GT, LT];

	new() {
		// set up relations between conditions
		neg(EQ, NEQ);
		com(GT, LT);
	}

	def neg(a: Arm64Cond, b: Arm64Cond) {
		a.negate = b;
		b.negate = a;
	}

	def com(a: Arm64Cond, b: Arm64Cond) {
		a.commute = b;
		b.commute = a;
	}
}

// TODO
class Arm64Assembler {}