
// Distinguishes an absolute address from an address that refers to a V3 entity.
def ABS_MARKER = 0x44332299;
def REL_MARKER = 0x55443388;

// class Arm64AddrRef extends Arm64Addr {
// 	def ref: Addr;
// 	new(base: Arm64Gpr, offset: Arm64Gpr, shift: int, ref, relative: bool)
// 		super(base, offset, shift, if(relative, REL_MARKER, ABS_MARKER)) { }
// }

// class Arm64LabelRef extends Arm64Addr {
// 	def label: Label;
// 	new(label) super(null, null, 0, REL_MARKER) { }
// }

// Implementation of address patcher for assembler.
class Arm64AddrPatcherImpl extends Arm64AddrPatcher {
	def mw: MachDataWriter;
	private var labelUses: List<(int, Label)>;

	new(mw) super(ABS_MARKER, REL_MARKER) { }

	def recordAbs32(pos: int, addr: Arm64Addr) {}
	def recordRel32(pos: int, delta: int, addr: Arm64Addr) {}
	def patch(addr: Addr, posAddr: int, absAddr: int) {}
	def patchLabels() {}
}

// Adds additional functionality to the base Arm64 assembler, particularly the
// functionality to record references to addresses in the code.
class Arm64MacroAssembler extends Arm64Assembler {
	def mw: MachDataWriter;
	def patcherImpl = Arm64AddrPatcherImpl.new(mw);

	new(mw) super(mw) {}
}
