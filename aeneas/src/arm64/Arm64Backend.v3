// Copyright 2024 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component Arm64Targets {
	new() {
		Aeneas.registerTarget(Arm64Target.new("arm64", false));
	}
}

def Regs: Arm64RegSet;

class Arm64Target extends Target {
	def test: bool;
	def DEFAULT_VADDR_START: int = 0x08000000;

	new(name: string, test) super(name) { }

	def configureCompiler(compiler: Compiler) {}

	def configureProgram(prog: Program) {
		prog.ERROR.fail("not implemented");
	}

	def computeFieldOffsets(prog: Program, b: Vector<IrField>, start: int) {
		prog.ERROR.fail("not implemented");
	}
	def addRoots(compiler: Compiler, prog: Program) {
		prog.ERROR.fail("not implemented");
	}

	def emit(compiler: Compiler, prog: Program) {
		prog.ERROR.fail("not implemented");
	}
}

// TODO: negative object headers
class Arm64Backend extends MachBackend {
	var asm: Arm64MacroAssembler; // TODO
	def test: bool;
	var codegen: SsaArm64Gen;
	var allocateRegs: void -> void;
	var allocateRegsGlobal: void -> void;

	// memory allocator configuration
	var objReg: Arm64Gpr;
	var sizeReg: Arm64Gpr;
	var ipReg: Arm64Gpr;
	var spReg: Arm64Gpr;
	var allocStubAddr: Addr;

	new(compiler: Compiler, prog: Program, mach: MachProgram, w: MachDataWriter, dwarf: Dwarf, test)
		super(compiler, prog, mach, w) {

		asm = Arm64MacroAssembler.new();
		if (ri_gc != null) {
			// call the RiRuntime.gc() method
			mach.fail("not implemented");
		} else {
			// there is no appropriate RiRuntime.gc() method
			objReg = Arm64Regs.R0;
			sizeReg = Arm64Regs.R0;
		}
		codegen = SsaArm64Gen.new(context, mach, asm, w, dwarf);
		if (compiler.useGlobalRegAllocMatcher != VstMatcher.None) allocateRegsGlobal = GlobalRegAlloc.new(Regs.SET, codegen).allocate;
		if (compiler.LocalRegAlloc) allocateRegs = LocalRegAlloc.new(Regs.SET, codegen).allocate;
		else allocateRegs = SimpleRegAlloc.new(Regs.SET, codegen).allocate;
	}

	// Override MachBackend	

	def genEntryStub() {
		mach.fail("not implemented");
	}

	def genAllocStub() {
		mach.fail("not implemented");
	}

	def genCodeFromSsa() {
		mach.fail("not implemented");
	}

	def patchCodeAddr(w: DataWriter, a: Addr, posAddr: int) {
		mach.fail("not implemented");
	}

	def genSignalHandlerStub() {
		mach.fail("not implemented");
	}

	def genFatalStub(ex: string, addr: Addr) {
		mach.fail("not implemented");
	}

	// Methods overridden for each OS target
	def genSigHandlerInstall(signo: int, handler: Addr);
	def asm_exit_r(r: X86_64Gpr);
	def asm_exit_code(code: int);
	def genTestOutput(main: IrMethod, frame: MachFrame);
}