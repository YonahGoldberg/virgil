/* The Arm64 Register set for register allocation
 * Defines constants and creates an instance of MachRegSet for configuration
 * Depends on Arm64Regs defined in Arm64Assembler.v3
 * Maps register allocation register values to register values used in assembling
 */
component Arm64RegSet {
    private def gprCount = 31; // x0-x30
    private def sfrCount = 0; // TODO SIMD and floating point registers
    private def allCount = 32; // TODO

    private def regSets = Array<Array<byte>>.new(allCount);
	private def regNames = Array<string>.new(allCount);

    // x29 is frame pointer and x30 is link register, can't allocate
	private def allocatableGprs = Array<byte>.new(gprCount - 2);
    private def sfrs = Array<byte>.new(sfrCount); // TODO SIMD + floating point registers
    // map from a "loc" to a gpr
	private def locToGprArr = Array<Arm64IntReg>.new(gprCount);
    private def locToSfrArr = Array<Arm64Sfr>.new(sfrCount); // TODO

    // physical registers start at 1, see class MachRegSet
    private var cursor = 1;
    private var gprStart = cursor;

    def R0 = gpr("r0", Arm64Regs.R0, true), R1 = gpr("r1", Arm64Regs.R1, true);
    def R2 = gpr("r2", Arm64Regs.R2, true), R3 = gpr("r3", Arm64Regs.R3, true);
    def R4 = gpr("r4", Arm64Regs.R4, true), R5 = gpr("r5", Arm64Regs.R5, true);
    def R6 = gpr("r6", Arm64Regs.R6, true), R7 = gpr("r7", Arm64Regs.R7, true);
    def R8 = gpr("r8", Arm64Regs.R8, true), R9 = gpr("r9", Arm64Regs.R9, true);
    def R10 = gpr("r10", Arm64Regs.R10, true), R11 = gpr("r11", Arm64Regs.R11, true);
    def R12 = gpr("r12", Arm64Regs.R12, true), R13 = gpr("r13", Arm64Regs.R13, true);
    def R14 = gpr("r14", Arm64Regs.R14, true), R15 = gpr("r15", Arm64Regs.R15, true);
    def R16 = gpr("r16", Arm64Regs.R16, true), R17 = gpr("r17", Arm64Regs.R17, true);
    def R18 = gpr("r18", Arm64Regs.R18, true), R19 = gpr("r19", Arm64Regs.R19, true);
    def R20 = gpr("r20", Arm64Regs.R20, true), R21 = gpr("r21", Arm64Regs.R21, true);
    def R22 = gpr("r22", Arm64Regs.R22, true), R23 = gpr("r23", Arm64Regs.R23, true);
    def R24 = gpr("r24", Arm64Regs.R24, true), R25 = gpr("r25", Arm64Regs.R25, true);
    def R26 = gpr("r26", Arm64Regs.R26, true), R27 = gpr("r27", Arm64Regs.R27, true);
    def R28 = gpr("r28", Arm64Regs.R28, true), R29 = gpr("r29", Arm64Regs.R29, false);
    def R30 = gpr("r30", Arm64Regs.R30, false);

    def physRegs = cursor;

    def ALL = set("{all}", Arrays.concat(allocatableGprs, sfrs));

	// def SCRATCH_GPR = R29; // is this to move from 3-addr to 2? If so I dont' need it

    // enough spill slots to not use the 31st bit TODO: CHECK
	def CALLER_SPILL_START = 100000000;
	def CALLEE_SPILL_START = 200000000;

    // TODO: more reg Classes
	private var regClasses = mapRegClasses([
		(RegClass.REF, ALL),
		(RegClass.I32, ALL),
		(RegClass.I64, ALL),
		(RegClass.F32, ALL),
		(RegClass.F64, ALL)
	]);

    def SET = MachRegSet.new(physRegs, regSets, regNames, regClasses, [],
		CALLER_SPILL_START, CALLEE_SPILL_START);

    // Creats a new general purpose register, returns unique identifier
    private def gpr(name: string, r: Arm64IntReg, allocatable: bool) -> byte {
		var loc = byte.view(cursor++), i = loc - gprStart;
		locToGprArr[loc] = r;
		if (allocatable) allocatableGprs[i] = loc;
		regSets[loc] = [loc];
		regNames[loc] = name;
		return loc;
	}

    // Creates a register set
    // name - the name of the set
    // a - the set of registers
    private def set(name: string, a: Array<byte>) -> byte {
		var loc = byte.view(cursor++);
		regSets[loc] = a;
		regNames[loc] = name;
		return loc;
	}

    // maps (RegClass, byte) -> RegClass by setting each RegClass tag to byte value
    private def mapRegClasses(v: Array<(RegClass, byte)>) -> Array<byte> {
		var result = Array<byte>.new(5); // XXX: number of reg classes
		for (t in v) result[t.0.tag] = t.1;
		return result;
	}
}