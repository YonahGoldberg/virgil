// Arm64 instructions are ints that look like <variant><mode arg><mode><code>
// where each part of the instruction is a byte

// codes
def MASK_CODE = 0xff;
def I_ADD = 0x00;
def I_MOV = 0x01;
def I_MOVK = 0x02;

// addressing modes
def MASK_AM = 0xff00;
def SHIFT_AM: byte = 8;
def AM_NONE = 0x00;
def AM_IMM = 0x01;
def AM_SHIFTED_IMM = 0x02;
def AM_EXTENDED_REG_LSL = 0x03;
def AM_SHIFTED_REG_LSL = 0x04;
def AM_REG = 0x05;

// addressing mode args
def MASK_AM_ARG = 0xff0000;
def SHIFT_AM_ARG: byte = 16;
def ARG_NONE = 0x00;

// variants (the width of the type the instruction operates on)
def MASK_VARIANT = 0xff000000;
def SHIFT_VARIANT: byte = 24;
def V_32 = 0x00;
def V_64 = 0x01;

// XXX: Add to utils?
type Maybe<T> {
	case None;
	case Some(t: T);
}

// The possible widths of immediates used in Arm64 instructions
type ImmWidth {
	case Imm12;
	case Imm16;
	case Imm19;
}

// Constructs an opcode from the 4 parts
def makeOpcode(code: int, am: int, amArg: int, variant: int) -> int {
	return code | (am << SHIFT_AM) | (amArg << SHIFT_AM_ARG) | (variant << SHIFT_VARIANT);
}

// Extracts the code section of the opcode
def getCode(opcode: int) -> int {
	return opcode & MASK_CODE;
}

// Inserts the code section of the opcode
def putOpcode(opcode: int, code: int) -> int {
	return opcode | code;
}

// Extracts the addressing mode argument section of the opcode
def getAmArg(opcode: int) -> int {
	return (opcode & MASK_AM_ARG) >> SHIFT_AM_ARG;
}

// Inserts the addressing mode argument section of the opcode
def putAmArg(opcode: int, arg: int) -> int {
	return (arg << SHIFT_AM_ARG) | opcode;
}

// Extracts the addressing mode section of the opcode
def getAm(opcode: int) -> int {
	return (opcode & MASK_AM) >> SHIFT_AM;
}

// Inserts the addressing mode section of the opcode
def putAm(opcode: int, am: int) -> int {
	return (am << SHIFT_AM) | opcode;
}

// Inserts the variant section of the opcode
def getVariant(opcode: int) -> int {
	return (opcode & MASK_VARIANT) >> SHIFT_VARIANT;
}

// Extracts the variant section of the opcode
def putVariant(opcode: int, variant: int) -> int {
	return (variant << SHIFT_VARIANT) | opcode;
}

// Inserts the variant section of the opcode according to the register class
// of the operands
def putRegClassVariant(opcode: int, rc: RegClass) -> int {
	match (rc) {
		I32, F32 => return (V_32 << SHIFT_VARIANT) | opcode;
		_ => return (V_64 << SHIFT_VARIANT) | opcode;
	}
}

def Regs: Arm64RegSet;
def Conds: Arm64Conds; // TODO

// Code generation for the Arm64 backend
class SsaArm64Gen extends SsaMachGen {
	def asm: Arm64MacroAssembler; // TODO
	def m = SsaInstrMatcher.new();
	def dwarf: Dwarf; // What is this?

	new(context: SsaContext, mach: MachProgram, asm, w: MachDataWriter, dwarf)
	super(context, mach, Arm64RegSet.SET, w) {}

	// Overidden Architecture Specific Routines
	def visitApply(block: SsaBlock, i: SsaApplyOp) {
		match (i.op.opcode) {
			_ => context.fail("not implemented"); // TODO
		}
	}

	def visitThrow(block: SsaBlock, i: SsaThrow) { context.fail("not implemented"); }
	def visitIf(block: SsaBlock, i: SsaIf) { context.fail("not implemented"); }
	def visitSwitch(block: SsaBlock, i: SsaSwitch) { context.fail("not implemented"); }
	def visitGoto(block: SsaBlock, target: SsaGoto) { context.fail("not implemented"); }

	// Override Code Generation
	def assemble(opcode: int, x: Array<Operand>) {
		context.fail("not implemented");
	}

	// Regalloc callbacks to add moves
	def genSaveLocal(reg: int, v: VReg) { context.fail("not implemented"); }
	def genRestoreLocal(v: VReg, reg: int) { context.fail("not implemented"); }
	def genMoveLocLoc(src: (VReg, int), dst: (VReg, int), regClass: RegClass) { context.fail("not implemented"); }

	// Register allocation callback to prepend a move
	def genMoveValLoc(src: VReg, dst: (VReg, int), regClass: RegClass) { context.fail("not implemented"); }
}